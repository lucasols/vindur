import { describe, expect, test } from 'vitest';
import { createDynamicCssColor } from '../../src/main';

describe('createDynamicCssColor runtime', () => {
  test('should throw error when called without hashId', () => {
    expect(() => createDynamicCssColor()).toThrow(
      'createDynamicCssColor() cannot be called at runtime without compiler transformation. The ID is automatically generated by the compiler.',
    );
  });

  test('should generate correct CSS variables and functions', () => {
    const color = createDynamicCssColor('test-123');

    expect(color.var).toBe('var(--test-123)');
    expect(color.alpha(0.5)).toBe(
      'color-mix(in srgb, var(--test-123) 50%, transparent)',
    );
    expect(color.darker(0.2)).toBe(
      'color-mix(in srgb, var(--test-123) 80%, #000)',
    );
    expect(color.lighter(0.3)).toBe(
      'color-mix(in srgb, var(--test-123) 70%, #fff)',
    );
    expect(color.saturatedDarker(0.1)).toBe(
      'color-mix(in srgb, var(--test-123) 90%, hsl(from var(--test-123) h 100% 20%))',
    );
  });

  test('should generate correct contrast functions', () => {
    const color = createDynamicCssColor('test-123');

    expect(color.contrast.var).toBe('var(--test-123-c)');
    expect(color.contrast.optimal()).toBe('var(--test-123-c-optimal)');
    expect(color.contrast.optimal({ alpha: 0.6 })).toBe(
      'color-mix(in srgb, var(--test-123-c-optimal) 60%, transparent)',
    );
    expect(color.contrast.alpha(0.8)).toBe(
      'color-mix(in srgb, var(--test-123-c) 80%, transparent)',
    );
  });

  test('should generate production mode selector classes', () => {
    const color = createDynamicCssColor('hash-456', false);

    expect(color.self.isDark).toBe('&.hash-456-s0');
    expect(color.self.isLight).toBe('&.hash-456-s1');
    expect(color.self.isDefined).toBe('&.hash-456-s2');
    expect(color.self.isNotDefined).toBe('&.hash-456-s3');
    expect(color.self.isVeryDark).toBe('&.hash-456-s4');
    expect(color.self.isNotVeryDark).toBe('&.hash-456-s5');
    expect(color.self.isVeryLight).toBe('&.hash-456-s6');
    expect(color.self.isNotVeryLight).toBe('&.hash-456-s7');

    expect(color.container.isDark).toBe('.hash-456-c0 &');
    expect(color.container.isLight).toBe('.hash-456-c1 &');
    expect(color.container.isDefined).toBe('.hash-456-c2 &');
    expect(color.container.isNotDefined).toBe('.hash-456-c3 &');
    expect(color.container.isVeryDark).toBe('.hash-456-c4 &');
    expect(color.container.isNotVeryDark).toBe('.hash-456-c5 &');
    expect(color.container.isVeryLight).toBe('.hash-456-c6 &');
    expect(color.container.isNotVeryLight).toBe('.hash-456-c7 &');
  });

  test('should generate dev mode selector classes', () => {
    const color = createDynamicCssColor('hash-456', true);

    expect(color.self.isDark).toBe('&.hash-456-self-is-dark');
    expect(color.self.isLight).toBe('&.hash-456-self-is-light');
    expect(color.self.isDefined).toBe('&.hash-456-self-is-defined');
    expect(color.self.isNotDefined).toBe('&.hash-456-self-is-not-defined');
    expect(color.self.isVeryDark).toBe('&.hash-456-self-is-very-dark');
    expect(color.self.isNotVeryDark).toBe('&.hash-456-self-is-not-very-dark');
    expect(color.self.isVeryLight).toBe('&.hash-456-self-is-very-light');
    expect(color.self.isNotVeryLight).toBe('&.hash-456-self-is-not-very-light');

    expect(color.container.isDark).toBe('.hash-456-container-is-dark &');
    expect(color.container.isLight).toBe('.hash-456-container-is-light &');
    expect(color.container.isDefined).toBe('.hash-456-container-is-defined &');
    expect(color.container.isNotDefined).toBe(
      '.hash-456-container-is-not-defined &',
    );
    expect(color.container.isVeryDark).toBe(
      '.hash-456-container-is-very-dark &',
    );
    expect(color.container.isNotVeryDark).toBe(
      '.hash-456-container-is-not-very-dark &',
    );
    expect(color.container.isVeryLight).toBe(
      '.hash-456-container-is-very-light &',
    );
    expect(color.container.isNotVeryLight).toBe(
      '.hash-456-container-is-not-very-light &',
    );
  });

  describe('setProps function', () => {
    test('should generate correct props for dark color', () => {
      const color = createDynamicCssColor('test-123', false);
      const result = color.setProps('#2d3748'); // dark color

      expect(result.className).toBe(
        'test-123-s0 test-123-s2 test-123-s5 test-123-s7',
      );
      expect(result.style).toEqual({
        '--test-123': '#2d3748',
        '--test-123-c': '#ffffff',
        '--test-123-c-optimal': '#ffffff',
      });
    });

    test('should generate correct props for light color', () => {
      const color = createDynamicCssColor('test-123', false);
      const result = color.setProps('#f7fafc'); // light color

      expect(result.className).toBe(
        'test-123-s1 test-123-s2 test-123-s5 test-123-s6',
      );
      expect(result.style).toEqual({
        '--test-123': '#f7fafc',
        '--test-123-c': '#000000',
        '--test-123-c-optimal': '#000000',
      });
    });

    test('should generate correct props for very dark color', () => {
      const color = createDynamicCssColor('test-123', false);
      const result = color.setProps('#1a1a1a'); // very dark color

      expect(result.className).toBe(
        'test-123-s0 test-123-s2 test-123-s4 test-123-s7',
      );
      expect(result.style).toEqual({
        '--test-123': '#1a1a1a',
        '--test-123-c': '#ffffff',
        '--test-123-c-optimal': '#ffffff',
      });
    });

    test('should generate correct props for very light color', () => {
      const color = createDynamicCssColor('test-123', false);
      const result = color.setProps('#ffffff'); // very light color

      expect(result.className).toBe(
        'test-123-s1 test-123-s2 test-123-s5 test-123-s6',
      );
      expect(result.style).toEqual({
        '--test-123': '#ffffff',
        '--test-123-c': '#000000',
        '--test-123-c-optimal': '#000000',
      });
    });

    test('should merge with user-provided className and style', () => {
      const color = createDynamicCssColor('test-123', false);
      const result = color.setProps('#ff0000', {
        className: 'custom-class',
        style: { padding: '10px', margin: '5px' },
      });

      expect(result.className).toBe(
        'custom-class test-123-s0 test-123-s2 test-123-s5 test-123-s7',
      );
      expect(result.style).toEqual({
        '--test-123': '#ff0000',
        '--test-123-c': '#ffffff',
        '--test-123-c-optimal': '#ffffff',
        padding: '10px',
        margin: '5px',
      });
    });

    test('should generate dev mode class names', () => {
      const color = createDynamicCssColor('test-123', true);
      const result = color.setProps('#333333');

      expect(result.className).toBe(
        'test-123-self-is-dark test-123-self-is-defined test-123-self-is-not-very-dark test-123-self-is-not-very-light',
      );
    });
  });

  describe('color detection', () => {
    test('should correctly identify dark colors', () => {
      const color = createDynamicCssColor('test', false);

      const darkColors = ['#000000', '#333333', '#1a1a1a', '#2d3748'];
      for (const darkColor of darkColors) {
        const result = color.setProps(darkColor);
        expect(result.className).toContain('test-s0'); // isDark
      }
    });

    test('should correctly identify light colors', () => {
      const color = createDynamicCssColor('test', false);

      const lightColors = ['#ffffff', '#f7fafc', '#e2e8f0', '#cbd5e0'];
      for (const lightColor of lightColors) {
        const result = color.setProps(lightColor);
        expect(result.className).toContain('test-s1'); // isLight
      }
    });

    test('should correctly identify very dark colors', () => {
      const color = createDynamicCssColor('test', false);

      const veryDarkColors = ['#000000', '#0a0a0a', '#1a1a1a'];
      for (const veryDarkColor of veryDarkColors) {
        const result = color.setProps(veryDarkColor);
        expect(result.className).toContain('test-s4'); // isVeryDark
      }
    });

    test('should correctly identify very light colors', () => {
      const color = createDynamicCssColor('test', false);

      const veryLightColors = ['#ffffff', '#f9f9f9', '#fafafa'];
      for (const veryLightColor of veryLightColors) {
        const result = color.setProps(veryLightColor);
        expect(result.className).toContain('test-s6'); // isVeryLight
      }
    });
  });
});
